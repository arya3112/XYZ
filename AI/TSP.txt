ASSIGNMENT 1 - TSP

import numpy as np

# Nearest Neighbor algorithm implementation
def nearest_neighbor(distance_matrix):
    n = len(distance_matrix)
    visited = [False] * n
    tour = [0]  # Start from city 0
    visited[0] = True
    total_distance = 0  # To accumulate the total distance

    for _ in range(1, n):
        last_city = tour[-1]
        nearest_city = None
        nearest_distance = float('inf')

        for city in range(n):
            if not visited[city]:
                distance = distance_matrix[last_city][city]
                if distance < nearest_distance:
                    nearest_distance = distance
                    nearest_city = city

        # Add the nearest city to the tour
        tour.append(nearest_city)
        visited[nearest_city] = True
        total_distance += nearest_distance  # Add the distance to the total

    # Return to the starting city (i.e., close the tour)
    total_distance += distance_matrix[tour[-1]][tour[0]]
    tour.append(0)  # Return to city 0
    return tour, total_distance

# Input function to get distance matrix from user
def input_distance_matrix():
    n = int(input("Enter the number of cities: "))
    
    # Initialize a matrix to store the distances
    distance_matrix = np.zeros((n, n))
    
    for i in range(n):
        for j in range(i + 1, n):  # Fill only the upper triangle (no need to enter both [i][j] and [j][i])
            distance = float(input(f"Enter distance between city {i + 1} and city {j + 1}: "))
            distance_matrix[i][j] = distance
            distance_matrix[j][i] = distance  # Since the matrix is symmetric
    
    return distance_matrix

# Main function to execute the code
def main():
    distance_matrix = input_distance_matrix()

    print("\nDistance Matrix:")
    print(distance_matrix)

    # Run the Nearest Neighbor algorithm
    tour, total_distance = nearest_neighbor(distance_matrix)
    
    # Print the tour and total distance
    print("\nThe nearest neighbor tour is:", [city + 1 for city in tour])  # Output cities as 1-indexed
    print("Total distance of the tour:", total_distance)
 
if __name__ == "__main__":
    main()
